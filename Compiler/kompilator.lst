
// ==========================================================================
//  GPPG error listing for yacc source file <kompilator.y - 14.06.2020 14:51:01>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  ACER-VN7-591G
//  DateTime: 14.06.2020 14:52:24
//  UserName: Marcel
// ==========================================================================



%namespace Compiler

%union
{
    public string   val;
    public char     type;
}

%token Program
%token Semicolon
%token IntCast DoubleCast
%token Int Real Bool
%token Assign
%token <val> Ident
%token <val> RealNumber IntegerNumber String
%token True False
%token If Else
%token While
%token Read Write
%token Plus Minus Multiply Divide
%token BitNeg BitOr BitAnd
%token Neg Or And
%token Equal NotEqual Greater Less GreaterEqual LessEqual
%token OpenPar ClosePar OpenCurly CloseCurly
%token Return
%token Eof Error

%type <type> start declarations commands command write assign if while expression interior

%%
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {interior}
// Warning: Terminating interior fixes the following size-1 NonTerminal set
   // {interior}
// Warning: NonTerminal symbol "interior" is unreachable
// Error: NonTerminal symbol "interior" has no productions
// ------------------------------------------------------------------------

start :
            Program
            OpenCurly
            declarations
            commands
            CloseCurly { YYACCEPT; }
          | error { Compiler.errorLines.Add(Compiler.lineno); YYABORT; }
          ;

declarations :
            declaration
            declarations
          | /* empty */
          ;

declaration :
            Int
            Ident { new IntIdent($2); }
            Semicolon
          | Real
            Ident { new RealIdent($2); }
            Semicolon
          | Bool
            Ident { new BoolIdent($2); }
            Semicolon
          | error { Compiler.errorLines.Add(Compiler.lineno); }
          ;

commands :
            command
            commands
          | /* empty */
          ;

command :
            OpenCurly commands CloseCurly
          | write
          | read
          | assign
          | if
          | while
          | return
          | error { Compiler.errorLines.Add(Compiler.lineno); }
          ;

write :
            Write
            String
            Semicolon { new WriteString($2); }
          | Write
            expression
            Semicolon { }
          ;

read :
            Read
            Ident { new Read($2); }
            Semicolon
          ;

return :
            Return
            Semicolon
          ;

assign :
            Ident
            Assign
            expression
            Semicolon { }
          ;

if :
            If
            OpenPar
            expression
            ClosePar
            command
            Else
            command
          | If
            OpenPar
            expression
            ClosePar
            command
          ;

while :
            While
            OpenPar
            expression
            ClosePar
            command
          ;

expression :
            logical
            Semicolon
          | error
          ;

logical :
            relational Or logical
          | relational And logical
          | relational
          ;

relational :
            additive Equal relational
          | additive NotEqual relational
          | additive Greater relational
          | additive Less relational
          | additive GreaterEqual relational
          | additive LessEqual relational
          | additive
          ;

additive :
            multiplicative Plus additive
          | multiplicative Minus additive
          | multiplicative
          ;

multiplicative :
            bit Multiply multiplicative
          | bit Divide multiplicative
          | bit
          ;

bit :
            unary BitOr bit
          | unary BitAnd bit
          | unary
          ;

unary :   
            Minus unary
          | BitNeg unary
          | Neg unary
          | IntCast unary
          | DoubleCast unary
          | OpenPar expression ClosePar
          | term
          ;

term : 
            Ident
          | RealNumber
          | IntegerNumber
          | True
          | False
          | OpenPar term ClosePar
          ;

%%

public Parser(Scanner scanner) : base(scanner) { }// ==========================================================================

